# Workflow by se2cird <https://github.com/se2cird>, ask me if you have any questions

# Workflow to build and upload AppImage for Linux x86_64 (amd64)

name: Rust Linux x86_64 Build

# Trigger configuration
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: '1.0.0'

# Global environment variables
env:
  BINARY_NAME: idevice_pair
  APP_NAME: iDevicePair
  VERSION: ${{ github.event.inputs.version }}
  ICON_PNG: icon.png
  CARGO_TERM_COLOR: always

jobs:
  # Linux builds
  build-appimage:
    name: Build & Upload AppImage (Linux x86_64)
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v4

      # Build setup
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libatk1.0-dev \
            libgtk-3-dev \
            pkg-config \
            libfuse3-dev \
            appstream \
            usbmuxd
      
      - name: Install libfuse2 (for AppImage compatibility)
        run: |
          # Bu adım, Ubuntu 22.04'te AppImage için gerekli olan libfuse2'yi
          # doğrudan Debian deposundan indirip kurar.
          wget http://ftp.debian.org/debian/pool/main/f/fuse/libfuse2_2.9.9-5_amd64.deb
          sudo dpkg -i libfuse2_2.9.9-5_amd64.deb
          rm libfuse2_2.9.9-5_amd64.deb

      # Build and package
      - name: Build binary
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-unknown-linux-gnu

      - name: Download appimagetool
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage \
            -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/lib AppDir/usr/share/icons/hicolor/256x256/apps AppDir/etc/udev/rules.d
          cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} AppDir/usr/bin/
          cp $(which usbmuxd) AppDir/usr/bin/
          sudo cp /usr/lib/udev/rules.d/39-usbmuxd.rules AppDir/etc/udev/rules.d/
          ICON_NAME=${ICON_PNG##*/}; BASENAME=${ICON_NAME%.*}
          cp ${{ env.ICON_PNG }} AppDir/${BASENAME}.png
          cp ${{ env.ICON_PNG }} AppDir/usr/share/icons/hicolor/256x256/apps/${BASENAME}.png
          cat > AppDir/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=${{ env.APP_NAME }}
          Exec=${{ env.BINARY_NAME }} %u
          Icon=${BASENAME}
          Categories=Utility;
          EOF
          ln -s usr/bin/${{ env.BINARY_NAME }} AppDir/AppRun
          chmod +x AppDir/AppRun

      - name: Build AppImage
        run: |
          if [ -z "${{ env.VERSION }}" ]; then
            FILENAME="${{ env.APP_NAME }}-$(date +%Y%m%d%H%M)-linux-x86_64.AppImage"
          else
            FILENAME="${{ env.APP_NAME }}-${{ env.VERSION }}-linux-x86_64.AppImage"
          fi
          
          echo "Building AppImage: $FILENAME"
          ./appimagetool.AppImage AppDir "$FILENAME"

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: idv-linux-x86_64.AppImage
          path: *.AppImage
